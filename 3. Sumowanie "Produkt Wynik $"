function sumujWartosciZKolumnNazwanychZFormulami() {
  const sheet = SpreadsheetApp.getActiveSpreadsheet().getActiveSheet();
  const lastRow = sheet.getLastRow();
  const headers = sheet.getRange(1, 1, 1, sheet.getLastColumn()).getValues()[0];

  // Szukamy numerów kolumn po nazwach
  const kolWynik = headers.indexOf("Wynik $") + 1;
  const kolProduktWynik = headers.indexOf("Produkt Wynik $") + 1;

  if (kolWynik === 0 || kolProduktWynik === 0) {
    throw new Error('Nie znaleziono kolumny "Wynik $" lub "Produkt Wynik $" w wierszu 1.');
  }

  const zakresProduktWynik = sheet.getRange(2, kolProduktWynik, lastRow - 1);
  const mergedRanges = zakresProduktWynik.getMergedRanges();

  const scaloneWiersze = new Set();

  // Obsługa scalonych wierszy — formuła z SUMA
  mergedRanges.forEach(range => {
    const startRow = range.getRow();
    const numRows = range.getNumRows();
    const zakresFormuly = `R${startRow}C${kolWynik}:R${startRow + numRows - 1}C${kolWynik}`;
    const formula = `=SUM(${zakresFormuly})`;

    sheet.getRange(startRow, kolProduktWynik).setFormulaR1C1(formula);

    for (let i = startRow; i < startRow + numRows; i++) {
      scaloneWiersze.add(i);
    }
  });

  // Obsługa niescalonych wierszy — formuła odnosząca się do tej samej linii
  for (let row = 2; row <= lastRow; row++) {
    if (!scaloneWiersze.has(row)) {
      const formula = `=R[0]C[-${kolProduktWynik - kolWynik}]`;
      sheet.getRange(row, kolProduktWynik).setFormulaR1C1(formula);
    }
  }
}
